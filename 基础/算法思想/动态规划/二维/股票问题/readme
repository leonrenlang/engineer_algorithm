# 参考：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/
# 英文：https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/discuss/108870/Most-consistent-ways-of-dealing-with-the-series-of-stock-problems


# 买卖股票问题的通用状态转移方程
# 每个子问题有三个变量（状态），当前的天数，
# 当前还能进行的交易次数，当前手上是否持有股票

# 定义各个状态
# dp[i][k][0 or 1]
# 比如dp[3][2][1]表示今天是第三天，至今最多进行2次交易，手上持有股票
# 目标是求dp[n-1][K][0]，既最后一天，最多允许K次交易，手上没有股票，获得的最大利润
# 其中i代表当前的日期，0代表没有持有股票，1代表持有股票
# T[i][k]代表在第i天结束经历了最多k次交易能获取的最大利润(k代表允许完成的最大交易数量)


# 状态转移方程
# dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + price[i])
# - 今天没有持有股票，可能是昨天我就没有持有股票，或者是昨天我持有股票，但是我今天卖掉了
# dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
# - 今天持有股票，可能是昨天我就持有股票，或者昨天没有持有股票，今天买了

# base case
# dp[-1][k][0] = 0  dp[-1][k][1] = -infinity
# dp[i][0][0] = 0 到了某天，但是没有进行过交易，利润为0
# dp[i][0][1] = -infinity  不可能出现的状况


