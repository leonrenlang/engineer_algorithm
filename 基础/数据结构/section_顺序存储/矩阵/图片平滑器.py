# 包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度 (向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。
#
# 示例 1:
#
# 输入:
# [[1,1,1],
#  [1,0,1],
#  [1,1,1]]
# 输出:
# [[0, 0, 0],
#  [0, 0, 0],
#  [0, 0, 0]]
# 解释:
# 对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0
# 对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0
# 对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0


def imageSmoother(M):
    n, m = len(M), len(M[0])
    res = [[0] * m for _ in range(n)]
    for i in range(n):
        for j in range(m):
            count = 0
            for r in (i-1, i, i+1):
                for c in (j-1, j, j+1):
                    if 0 <= r < n and 0 <= c < m:
                        res[i][j] += M[r][c]
                        count += 1
            res[i][j] //= count
    return res
if __name__ == '__main__':
    M = [[1,1,1],[1,0,1],[1,1,1]]
    print(imageSmoother(M))