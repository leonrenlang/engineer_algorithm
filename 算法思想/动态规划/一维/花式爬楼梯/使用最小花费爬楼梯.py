# 问题：数组的每个索引作为一个阶梯，第i个阶梯对应着一个非负数的体力花费值 cost[i](索引从0开始)。
# 每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。
# 您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。

# 示例 1:
# 输入: cost = [10, 15, 20]
# 输出: 15
# 解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。
#  示例 2:
# 输入: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
# 输出: 6
# 解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。

# 思想：
# - 状态转移方程很容易写，主要是base case
#   到达当前阶梯最小花费为到达该阶梯的花费+min(dp[i-1], d[i-2])
# - base case: 第一个或者第二个台阶
# - 注意：这个题目的最终点不是最后一个台阶，而是楼顶，因此最终的结果是判断倒数第一个台阶与倒
# 数第二个台阶到楼顶谁近！！！
def minCostClimbingStairs(cost):
    dp_i_1 = 0
    dp_i_2 = 0
    for i in range(len(cost)):
        cur = cost[i] + min(dp_i_1, dp_i_2)
        dp_i_2 = dp_i_1
        dp_i_1 = cur
    return min(dp_i_1, dp_i_2)


